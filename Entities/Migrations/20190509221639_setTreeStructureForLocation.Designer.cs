// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20190509221639_setTreeStructureForLocation")]
    partial class setTreeStructureForLocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<int?>("PostCityId");

                    b.Property<string>("Street");

                    b.Property<string>("StreetBus");

                    b.Property<int?>("StreetNumber");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PostCityId");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Models.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdressId");

                    b.Property<string>("BrandName")
                        .IsRequired();

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<int?>("QualityId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique()
                        .HasFilter("[AdressId] IS NOT NULL");

                    b.HasIndex("QualityId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Models.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Models.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationName")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Models.Entities.PostCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("PostCode")
                        .IsRequired();

                    b.Property<string>("Province");

                    b.Property<bool?>("SubMunicipality");

                    b.HasKey("Id");

                    b.ToTable("PostCity");
                });

            modelBuilder.Entity("Models.Entities.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price");

                    b.Property<decimal>("PricePerUnit");

                    b.HasKey("Id");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<decimal>("LatestPrice");

                    b.Property<decimal>("LatestPricePerUnit");

                    b.Property<string>("LinkPdfManual");

                    b.Property<int?>("LocationId");

                    b.Property<decimal>("LowestPrice");

                    b.Property<decimal>("LowestPricePerUnit");

                    b.Property<int>("NumberInStock");

                    b.Property<string>("Picture");

                    b.Property<string>("ProductIdentifier")
                        .IsRequired();

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<int?>("QualityId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("QualityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Models.Entities.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DayOfPurchase");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<decimal>("LatestPrice");

                    b.Property<decimal>("LatestPricePerUnit");

                    b.Property<string>("LinkScanTicket");

                    b.Property<decimal>("LowestPrice");

                    b.Property<decimal>("LowestPricePerUnit");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductVersion");
                });

            modelBuilder.Entity("Models.Entities.Quality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QualityName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Quality");
                });

            modelBuilder.Entity("Models.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "ok"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Niet Ok"
                        });
                });

            modelBuilder.Entity("Models.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdressId");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<string>("SupplierName")
                        .IsRequired();

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique()
                        .HasFilter("[AdressId] IS NOT NULL");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Models.Entities.Adress", b =>
                {
                    b.HasOne("Models.Entities.Country", "Country")
                        .WithMany("Adresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("Models.Entities.PostCity", "PostCity")
                        .WithMany("Adresses")
                        .HasForeignKey("PostCityId");
                });

            modelBuilder.Entity("Models.Entities.Brand", b =>
                {
                    b.HasOne("Models.Entities.Adress", "Adress")
                        .WithOne("Brand")
                        .HasForeignKey("Models.Entities.Brand", "AdressId");

                    b.HasOne("Models.Entities.Quality")
                        .WithMany("Brands")
                        .HasForeignKey("QualityId");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.HasOne("Models.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Models.Entities.Location", b =>
                {
                    b.HasOne("Models.Entities.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Models.Entities.Product", b =>
                {
                    b.HasOne("Models.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Models.Entities.Location", "Location")
                        .WithMany("Products")
                        .HasForeignKey("LocationId");

                    b.HasOne("Models.Entities.Quality", "Quality")
                        .WithMany("Products")
                        .HasForeignKey("QualityId");

                    b.HasOne("Models.Entities.Status", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Models.Entities.ProductVersion", b =>
                {
                    b.HasOne("Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Models.Entities.Supplier", "Supplier")
                        .WithMany("ProductVersions")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Models.Entities.Supplier", b =>
                {
                    b.HasOne("Models.Entities.Adress", "Adress")
                        .WithOne("Supplier")
                        .HasForeignKey("Models.Entities.Supplier", "AdressId");
                });
#pragma warning restore 612, 618
        }
    }
}
